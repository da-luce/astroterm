name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-linux:
    runs-on: ubuntu-latest  # Native x86_64 Ubuntu runner
    strategy:
      matrix:
        compiler: [gcc, clang]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # Plus gcovr for code coverage
    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          python3-setuptools \
          ninja-build \
          build-essential \
          xxd \
          wget \
          pkg-config \
          libncurses-dev \
          libargtable2-dev
        pip3 install meson gcovr

    - name: Build for Linux x86_64
      env:
        CC: ${{ matrix.compiler }}
      run: |
        sh install.sh

    - name: Run Tests
      run: |
        meson test -v -C build

    - name: Generate Code Coverage Reports
      run: |
        ninja coverage-xml -C build

    - name: Upload x86_64 Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-linux-x86_64
        path: build/astroterm

    - name: Upload Coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: build/meson-logs/coverage.xml

  build-mac:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-13]
        arch: [arm64, x86]
        exclude:
          - os: macos-latest
            arch: x86
          - os: macos-13
            arch : arm64

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install Build Dependencies
      run: |
        brew update
        brew install \
          meson \
          ninja \
          ncurses \
          argtable

    - name: Build for macOS ${{ matrix.arch }}
      env:
        CC: clang
      run: |
        sh install.sh

    - name: Run Tests
      run: |
        meson test -v -C build

    - name: Upload macOS ${{ matrix.arch }} Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-mac-${{ matrix.arch }}
        path: build/astroterm

  build-win:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, windows-2019]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python Dependencies
      run: pip install meson ninja

    - name: Prepare MSVC
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64

    - name: Clone and Build PDCurses
      run: |
        mkdir \build\local\lib
        mkdir \build\local\include
        git clone https://github.com/wmcbrine/PDCurses.git
        cd PDCurses\wincon
        nmake -f Makefile.vc WIDE=Y UTF8=Y
        copy pdcurses.lib \build\local\lib
        copy ..\curses.h \build\local\include
        copy ..\panel.h \build\local\include

    - name: Download and Build Argtable2
      run: |
        curl -L -o argtable2-13.tar.gz http://prdownloads.sourceforge.net/argtable/argtable2-13.tar.gz
        tar -xzf argtable2-13.tar.gz
        cd argtable2-13\src
        nmake -f Makefile.nmake
        copy argtable2.lib \build\local\lib
        copy argtable2.h \build\local\include

    - name: Download BSC5
      run: curl -L -o data/bsc5 http://tdc-www.harvard.edu/catalogs/BSC5 || echo "bsc5 already exists or curl failed"

    - name: Build for Windows x86_64
      run: |
        meson setup build -Drelease_build=true
        meson compile -C build

    - name: Run Tests
      run: |
        meson test -v -C build

    - name: Upload Windows x86_64 Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-win-x86_64
        path: build/astroterm.exe

  code-quality:
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Code Quality Tools
      run: |
        sudo apt-get install -y cppcheck clang-format

    - name: Run Cppcheck
      run: |
        cppcheck \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=missingInclude \
          --suppress=style \
          --error-exitcode=1 \
          src/

    - name: Check Formatting
      run: |
        sh ./scripts/format.sh --check

  upload-coverage:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Download Coverage Reports
      uses: actions/download-artifact@v3
      with:
        name: coverage
        path: coverage

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage/coverage.xml
        fail_ci_if_error: true

  publish-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-mac, build-win, code-quality, upload-coverage]
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    steps:

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-linux-x86_64
        path: build-linux-x86_64

    - name: Generate Changelog
      id: changelog
      uses: Requarks/changelog-action@v1
      with:
        token: ${{ github.token }}
        tag: ${{ github.ref_name }}
        writeToFile: false

    - name: Update GitHub Release
      uses: ncipollo/release-action@v1.12.0
      with:
        allowUpdates: true
        draft: false
        makeLatest: true
        name: ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changes }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: 'build-linux-x86_64/astroterm,build-mac-arm64/astroterm'